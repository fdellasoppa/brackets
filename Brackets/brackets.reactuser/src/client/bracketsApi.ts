//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @return OK
     */
    matches(): Promise<Match[]> {
        let url_ = this.baseUrl + "/matches";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processMatches(_response);
        });
    }

    protected processMatches(response: Response): Promise<Match[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Match.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Match[]>(null as any);
    }
}

export class Country implements ICountry {
    id?: CountryId;
    name?: string | undefined;
    flagImageCode?: string | undefined;

    constructor(data?: ICountry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] ? CountryId.fromJS(_data["id"]) : <any>undefined;
            this.name = _data["name"];
            this.flagImageCode = _data["flagImageCode"];
        }
    }

    static fromJS(data: any): Country {
        data = typeof data === 'object' ? data : {};
        let result = new Country();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id ? this.id.toJSON() : <any>undefined;
        data["name"] = this.name;
        data["flagImageCode"] = this.flagImageCode;
        return data;
    }
}

export interface ICountry {
    id?: CountryId;
    name?: string | undefined;
    flagImageCode?: string | undefined;
}

export class CountryId implements ICountryId {
    id?: number | undefined;

    constructor(data?: ICountryId) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): CountryId {
        data = typeof data === 'object' ? data : {};
        let result = new CountryId();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}

export interface ICountryId {
    id?: number | undefined;
}

export class Match implements IMatch {
    id?: MatchId;
    matchDate?: Date;
    localTeam?: Team;
    awayTeam?: Team;

    constructor(data?: IMatch) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] ? MatchId.fromJS(_data["id"]) : <any>undefined;
            this.matchDate = _data["matchDate"] ? new Date(_data["matchDate"].toString()) : <any>undefined;
            this.localTeam = _data["localTeam"] ? Team.fromJS(_data["localTeam"]) : <any>undefined;
            this.awayTeam = _data["awayTeam"] ? Team.fromJS(_data["awayTeam"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Match {
        data = typeof data === 'object' ? data : {};
        let result = new Match();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id ? this.id.toJSON() : <any>undefined;
        data["matchDate"] = this.matchDate ? this.matchDate.toISOString() : <any>undefined;
        data["localTeam"] = this.localTeam ? this.localTeam.toJSON() : <any>undefined;
        data["awayTeam"] = this.awayTeam ? this.awayTeam.toJSON() : <any>undefined;
        return data;
    }
}

export interface IMatch {
    id?: MatchId;
    matchDate?: Date;
    localTeam?: Team;
    awayTeam?: Team;
}

export class MatchId implements IMatchId {
    id?: number | undefined;

    constructor(data?: IMatchId) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): MatchId {
        data = typeof data === 'object' ? data : {};
        let result = new MatchId();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}

export interface IMatchId {
    id?: number | undefined;
}

export class Team implements ITeam {
    id?: TeamId;
    name?: string | undefined;
    country?: Country;
    countryLangs?: { [key: string]: string; } | undefined;

    constructor(data?: ITeam) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] ? TeamId.fromJS(_data["id"]) : <any>undefined;
            this.name = _data["name"];
            this.country = _data["country"] ? Country.fromJS(_data["country"]) : <any>undefined;
            if (_data["countryLangs"]) {
                this.countryLangs = {} as any;
                for (let key in _data["countryLangs"]) {
                    if (_data["countryLangs"].hasOwnProperty(key))
                        (<any>this.countryLangs)![key] = _data["countryLangs"][key];
                }
            }
        }
    }

    static fromJS(data: any): Team {
        data = typeof data === 'object' ? data : {};
        let result = new Team();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id ? this.id.toJSON() : <any>undefined;
        data["name"] = this.name;
        data["country"] = this.country ? this.country.toJSON() : <any>undefined;
        if (this.countryLangs) {
            data["countryLangs"] = {};
            for (let key in this.countryLangs) {
                if (this.countryLangs.hasOwnProperty(key))
                    (<any>data["countryLangs"])[key] = (<any>this.countryLangs)[key];
            }
        }
        return data;
    }
}

export interface ITeam {
    id?: TeamId;
    name?: string | undefined;
    country?: Country;
    countryLangs?: { [key: string]: string; } | undefined;
}

export class TeamId implements ITeamId {
    id?: number | undefined;

    constructor(data?: ITeamId) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): TeamId {
        data = typeof data === 'object' ? data : {};
        let result = new TeamId();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}

export interface ITeamId {
    id?: number | undefined;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}